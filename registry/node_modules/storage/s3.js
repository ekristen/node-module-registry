// Native Modules
var util = require('util')

// Installed Modules
var _ = require('lodash')
var AWS = require('aws-sdk')

// Local Modules
var config = require('config')
var logger = require('logger').child({component: 'storage/s3'})

// S3 File Storage
function S3Storage () {
  AWS.config = {
    accessKeyId: config.storage.s3.accessKeyId,
    secretAccessKey: config.storage.s3.secretAccessKey
  }

  this.s3 = new AWS.S3({region: config.storage.s3.region})
}

util.inherits(S3Storage, require('storage/common'))

S3Storage.prototype.getFile = function (filename, callback) {
  var self = this

  logger.info({filename: filename}, 'getFile')

  var params = {
    Bucket: config.storage.s3.bucket,
    Key: [config.storage.s3.prefix, filename].join('/')
  }

  logger.debug({params: params}, 'getFile')

  // S3 Supports Redirect, if so send a URL instead of a ReadStream
  if (config.storage.s3.redirect === true || config.storage.s3.redirect === 'true') {
    params.Expires = config.storage.s3.expires
    var signedUrl = self.s3.getSignedUrl('getObject', params)

    logger.info({url: signedUrl}, 'getFile Redirect')

    return callback(null, signedUrl, true)
  }

  var readStream = self.s3.getObject(params).createReadStream()

  readStream.on('error', function (err) {
    logger.error({err: err}, 'getFile.readStream.error')
  })

  callback(null, readStream)
}

S3Storage.prototype.saveFile = function (attachments, callback) {
  var self = this

  Object.keys(attachments).forEach(function (a) {
    var params = {
      Bucket: config.storage.s3.bucket,
      Key: [config.storage.s3.prefix, a].join('/'),
      Body: new Buffer(attachments[a].data, 'base64'),
      ServerSideEncryption: 'AES256'
    }

    logger.debug({params: _.omit(params, ['Body'])}, 'saveFile S3 Parameters')

    self.s3.putObject(params, function (err) {
      if (err) {
        logger.fatal(err, 'saveFile.putObject.error')
        return callback(err)
      }

      logger.info({filename: a}, 'saveFile successful')

      return callback(null)
    })
  })
}

S3Storage.prototype.deleteFile = function (filename, callback) {
  var self = this

  var params = {
    Bucket: config.storage.s3.bucket,
    Key: [config.storage.s3.prefix, filename].join('/')
  }

  logger.debug({params: params}, 'deleteFile S3 Parameters')

  self.s3.deleteObject(params, function (err) {
    if (err) {
      logger.error(err, 'deleteFile.deleteObject.error')
      return callback(err)
    }

    logger.info({filename: filename}, 'deleteFile successful')

    return callback(null)
  })
}

module.exports = S3Storage
