// Native Modules
var fs = require('fs')
var path = require('path')
var util = require('util')

// Installed Modules
var after = require('after')
var mkdirp = require('mkdirp')

// Local Modules
var config = require('config')
var logger = require('logger').child({component: 'storage/local'})

// Local Filesystem Storage
function LocalStorage () {
  logger.info({config: config.storage.local}, 'configuration')

  mkdirp.sync(path.join(config.storage.local.path))
}

util.inherits(LocalStorage, require('storage/common'))

/**
 * getFile
 * @param {String} filename
 * @param {Function} callback
 * @returns {ReadStream}
 */
LocalStorage.prototype.getFile = function (filename, callback) {
  logger.info({filename: filename}, 'getFile')
  var readStream = fs.createReadStream(path.join(config.storage.local.path, filename))

  readStream.on('error', function (err) {
    logger.fatal({err: err, filename: filename}, 'getFile ReadStream Error')
  })

  callback(null, readStream)
}

/**
 * saveFile
 * @param {Array} attachments
 * @param {Function} callback
 */
LocalStorage.prototype.saveFile = function (attachments, callback) {
  logger.info({files: attachments}, 'saveFile')

  var done = after(Object.keys(attachments).length, callback)

  Object.keys(attachments).forEach(function (a) {
    // Make sure the namespace directory exists
    mkdirp(path.join(config.storage.local.path, a.split('/')[0]), function (err) {
      if (err) {
        logger.fatal({err: err}, 'unable to create file storage path')
        return done(err)
      }

      fs.writeFile(path.join(config.storage.local.path, a), new Buffer(attachments[a].data, 'base64'), function (err) {
        if (err) {
          logger.fatal({err: err}, 'unable to save file')
          return done(err)
        }

        return done()
      })
    })
  })
}

/**
 * deleteFile
 * @param {String} filename
 * @param {Function} callback
 */
LocalStorage.prototype.deleteFile = function (filename, callback) {
  fs.unlink(path.join(config.storage.local.path, filename), function (err) {
    if (err) {
      logger.fatal({err: err}, 'unable to delete file')
      return callback(err)
    }

    return callback()
  })
}

module.exports = LocalStorage
