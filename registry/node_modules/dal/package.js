var _ = require('lodash')
var async = require('async')
var config = require('config')
var datastore = require('datastore')
var storage = require('storage')
var merge = require('package/merge')

var logger = require('logger').child({component: 'dal/package'})

// Should handle Gets, Puts

function getPackage (pkgname, callback) {
  datastore.get(pkgname, function (err, stored) {
    if (err && !err.notFound) {
      logger.error(err, 'leveldb.get error')
      return callback(err)
    }

    if (err && err.notFound) {
      return callback(null, {})
    }

    callback(null, stored)
  })
}
module.exports.get = getPackage

function getFile (filename, callback) {
  storage.getFile(filename, callback)
}
module.exports.getFile = getFile

function publish (pkgdata, user, callback) {
  logger.debug({pkg: pkgdata}, 'dalpkg/publish')

  var stored_pkgdata

  async.series({
    getMetadata: function publishGetMetadata (cb) {
      datastore.get(pkgdata._id, function (err, stored) {
        if (err && !err.notFound) {
          logger.error(err, 'leveldb.get error')
          return cb(err)
        }

        if (err && err.notFound) {
          stored = {}
        }

        logger.debug('publish/getMetadata')

        stored_pkgdata = _.clone(stored)
        cb(null)
      })
    },
    checkVersion: function publishCheckVersion (cb) {
      if (config.allow_previous_version === true) {
        return cb()
      }

      if (_.isEmpty(stored_pkgdata)) {
        return cb()
      }

      var found = false

      logger.debug({package: stored_pkgdata}, 'checkVersion')

      Object.keys(pkgdata.versions).forEach(function (version) {
        if (typeof stored_pkgdata.time[version] !== 'undefined') {
          found = true
        }
      })

      if (found === true) {
        return cb(new Error('Cannot publish a version that already exists, please increment version'))
      }

      cb()
    },
    saveFile: function publishSaveFile (cb) {
      storage.saveFile(pkgdata._attachments, function (err) {
        if (err) {
          logger.error(err, 'storage.saveFile error')
          return cb(err)
        }

        logger.debug('publish/saveFile success')

        cb(null)
      })
    },
    updateMetadata: function publishUpdateMetadata (cb) {
      datastore.put(pkgdata._id, merge(stored_pkgdata, pkgdata, user), function (err) {
        if (err) {
          logger.error(err, 'datastore.save error')
          return cb(err)
        }

        logger.debug('publish/updateMetadata success')

        cb()
      })
    }
  }, function publishSeriesCallback (err) {
    if (err) {
      logger.error(err, 'dal/package.publish error')
      return callback(err)
    }

    logger.debug('publish/finished')

    callback()
  })
}
module.exports.publish = publish

function unpublish (filename, callback) {
  storage.deleteFile(filename, function (err) {
    if (err) {
      logger.error(err, 'dal/package.unpublish error')
      return callback(err)
    }

    callback()
  })
}
module.exports.unpublish = unpublish

function revisionUpdate (pkgjson, callback) {
  var pkgdata = JSON.parse(pkgjson)

  datastore.put(pkgdata._id, pkgdata, function (err) {
    if (err) {
      logger.error(err, 'datastore.save error')
      return callback(err)
    }

    callback()
  })
}
module.exports.revisionUpdate = revisionUpdate

function addTag (pkgname, tag, version, callback) {
  getPackage(pkgname, function (err, pkgdata) {
    if (err) {
      logger.error(err, 'addTag.getPackage error')
      return callback(err)
    }

    pkgdata['dist-tags'][tag] = version.replace(/"/g, '')

    datastore.put(pkgdata._id, pkgdata, function (err) {
      if (err) {
        logger.error(err, 'addTag.datastore.save error')
        return callback(err)
      }

      callback()
    })
  })
}
module.exports.addTag = addTag

function removeTag (pkgname, tag, callback) {
  getPackage(pkgname, function (err, pkgdata) {
    if (err) {
      logger.error(err, 'removeTag.getPackage error')
      return callback(err)
    }

    delete pkgdata['dist-tags'][tag]

    datastore.put(pkgdata._id, pkgdata, function (err) {
      if (err) {
        logger.error(err, 'removeTag.datastore.save error')
        return callback(err)
      }

      callback()
    })
  })
}
module.exports.removeTag = removeTag
